plugins {
    id 'java-lib'
    id 'com.diffplug.spotless' version '6.11.0'

    id 'signing'
    id 'maven-publish'
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

dependencies {
    testImplementation 'commons-codec:commons-codec:1.15'
    testImplementation 'org.assertj:assertj-core:3.23.1'
}

// maven publish via Sonatype
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId = 'consistent-hashing-selector-java'

            pom {
                name = 'Consistent Hashing Selector Java'
                description = 'A simple immutable Consistent Hashing cache.'
                url = 'https://github.com/uharaqo/consistent-hashing-selector-java'
                scm {
                    url = 'https://github.com/uharaqo/consistent-hashing-selector-java'
                    connection = 'scm:git://github.com/uharaqo/consistent-hashing-selector-java.git'
                    developerConnection = 'scm:git://github.com/uharaqo/consistent-hashing-selector-java.git'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'uharaqo'
                        name = 'uharaqo'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('MAVEN_USERNAME')
                password = System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}
if (hasProperty('signingPassword')) {
    signing {
        def signingKey = findProperty('signingKey')
        def signingPassword = findProperty('signingPassword')
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign configurations.archives
    }
}
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
